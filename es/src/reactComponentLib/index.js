/* eslint-disable */
import React from 'react';
import { createUseStyles, ThemeProvider } from 'react-jss';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

// https://www.figma.com/file/RSwdamseVHwjNhSUeiEKsH/Design-Systems-Generator?node-id=418%3A12
var black = '#31393C';
var blue = '#0070ac';
var green = '#7CEA9C';
var red = '#F45B69';
/******************************************************************************
 * Default theme colors
 *****************************************************************************/
var primary = blue;
var success = green;
var danger = red;

var typography_ratio = 1.25;
var typography_base = 14;
var fontFamily = '"Inter", sans-serif';
/******************************************************************************
 * Autogenerated styles. Only modify above this line.
 *****************************************************************************/
var typography_scale = [
    typography_base * Math.pow((1 / typography_ratio), 3),
    typography_base * Math.pow((1 / typography_ratio), 2),
    typography_base * Math.pow((1 / typography_ratio), 1),
    typography_base,
    typography_base * Math.pow(typography_ratio, 1),
    typography_base * Math.pow(typography_ratio, 2),
    typography_base * Math.pow(typography_ratio, 3),
    typography_base * Math.pow(typography_ratio, 4),
    typography_base * Math.pow(typography_ratio, 5)
];

var base_spacing = 10;
var spacing_ratio = 1.25;
var spacing_scale = [
    base_spacing,
    base_spacing * Math.pow(spacing_ratio, 1),
    base_spacing * Math.pow(spacing_ratio, 2),
    base_spacing * Math.pow(spacing_ratio, 3),
    base_spacing * Math.pow(spacing_ratio, 4),
    base_spacing * Math.pow(spacing_ratio, 5)
];

var inputGlobalStyles = {
    container: {
        border: 'none',
        borderRadius: '10px',
        height: '40px',
        fontFamily: fontFamily,
        fontSize: typography_base,
        paddingLeft: "".concat(spacing_scale[3], "px"),
        paddingRight: "".concat(spacing_scale[3], "px")
    }
};

/******************************************************************************
 * Similar to SASS mix function. Mixes 2 colors and returns the color created
 * @param {string} color
 * @param {number} decimal
 * @returns {Color} Hex color
 *****************************************************************************/
var shadeColor = function (color, decimal) {
    var base = color.startsWith('#') ? 1 : 0;
    var r = parseInt(color.substring(base, 3), 16);
    var g = parseInt(color.substring(base + 2, 5), 16);
    var b = parseInt(color.substring(base + 4, 7), 16);
    r = Math.round(r / decimal);
    g = Math.round(g / decimal);
    b = Math.round(b / decimal);
    r = (r < 255) ? r : 255;
    g = (g < 255) ? g : 255;
    b = (b < 255) ? b : 255;
    var rr = ((r.toString(16).length === 1) ? "0".concat(r.toString(16)) : r.toString(16));
    var gg = ((g.toString(16).length === 1) ? "0".concat(g.toString(16)) : g.toString(16));
    var bb = ((b.toString(16).length === 1) ? "0".concat(b.toString(16)) : b.toString(16));
    return "#".concat(rr).concat(gg).concat(bb);
};
/******************************************************************************
 * Takes a string of a hex formatted color and returns the rgb/rgba equivalent.
 * @param {Color} hex color to transform to rgba.
 * @param {number} opacity last value on rgba string, in scale 0 to 1.
 * @returns {sgring} string containing rgba value.
 *****************************************************************************/
var hexToRGB = function (hex, opacity) {
    var r = parseInt(hex.slice(1, 3), 16);
    var g = parseInt(hex.slice(3, 5), 16);
    var b = parseInt(hex.slice(5, 7), 16);
    if (opacity) {
        return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(opacity, ")");
    }
    return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
};

var primaryShadow = hexToRGB(primary, 0.25);
var successShadow$1 = hexToRGB(success, 0.25);
var dangerShadow$1 = hexToRGB(danger, 0.25);
var blackShadow = hexToRGB(black, 0.05);
var commonStyles = {
    container: __assign(__assign({}, inputGlobalStyles.container), { cursor: 'pointer' }),
    label: {
        fontSize: typography_scale[3],
        fontWeight: 'bold',
        letterSpacing: '0.46px'
    }
};
var styles = {
    default_container: __assign(__assign({}, commonStyles.container), { background: 'white', border: "1px solid ".concat(hexToRGB(black, 0.1)), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
            background: shadeColor('#ffffff', 1.05)
        }, '&:active': {
            boxShadow: "0px 0px 7px 8px ".concat(blackShadow)
        }, '&:focus': {
            boxShadow: "0px 0px 7px 8px ".concat(blackShadow)
        } }),
    default_label: __assign(__assign({}, commonStyles.label), { color: black }),
    primary_container: __assign(__assign({}, commonStyles.container), { background: primary, boxShadow: "0px 4px 10px 3px ".concat(primaryShadow), transition: [['background', '300ms']], '&:hover': {
            background: shadeColor(primary, 1.2)
        }, '&:active': {
            boxShadow: "0px 0px 7px 8px ".concat(primaryShadow)
        }, '&:focus': {
            boxShadow: "0px 0px 7px 8px ".concat(primaryShadow)
        } }),
    primary_label: __assign(__assign({}, commonStyles.label), { color: 'white' }),
    success_container: __assign(__assign({}, commonStyles.container), { background: '#55E47F', boxShadow: "0px 4px 10px 3px ".concat(successShadow$1), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
            background: shadeColor(success, 1.2)
        }, '&:active': {
            boxShadow: "0px 0px 7px 8px ".concat(successShadow$1)
        }, '&:focus': {
            boxShadow: "0px 0px 7px 8px ".concat(successShadow$1)
        } }),
    success_label: __assign(__assign({}, commonStyles.label), { color: 'white' }),
    danger_container: __assign(__assign({}, commonStyles.container), { background: danger, boxShadow: "0px 4px 10px 3px ".concat(dangerShadow$1), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
            background: shadeColor(danger, 1.2)
        }, '&:active': {
            boxShadow: "0px 0px 7px 8px ".concat(dangerShadow$1)
        }, '&:focus': {
            boxShadow: "0px 0px 7px 8px ".concat(dangerShadow$1)
        } }),
    danger_label: __assign(__assign({}, commonStyles.label), { color: 'white' })
};
var useStyles = createUseStyles(function (theme) { return (__assign(__assign({}, styles), theme.Button)); });

var Button = function (_a) {
    var _b = _a.appearance, appearance = _b === void 0 ? 'default' : _b, children = _a.children, onClick = _a.onClick;
    var classes = useStyles();
    return (React.createElement("button", { onClick: onClick, className: classes["".concat(appearance, "_container")] },
        React.createElement("span", { className: classes["".concat(appearance, "_label")] }, children)));
};

/******************************************************************************
 * Wraps children elements and styles them with the theme passed as prop.
 * @param {Theme} theme object containing the styles.
 * @param {ReactNode} children JSX elements to be styled with context.
 * @returns {React.FC} Wrapper with theme containing styles as a Context.
 *****************************************************************************/
var SoraTheme = function (_a) {
    var children = _a.children, theme = _a.theme;
    return (React.createElement(ThemeProvider, { theme: theme }, children));
};

var successShadow = hexToRGB(success, 0.25);
var dangerShadow = hexToRGB(danger, 0.25);
var blackTint = hexToRGB(black, 1.05);
var darkDefault = {
    Button: {
        default_container: __assign(__assign({}, inputGlobalStyles.container), { cursor: 'pointer', background: black, border: "1px solid ".concat(hexToRGB('#ffffff', 0.5)), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
                background: shadeColor(black, 0.8)
            }, '&:active': {
                boxShadow: "0px 0px 7px 8px ".concat(blackTint)
            }, '&:focus': {
                boxShadow: "0px 0px 7px 8px ".concat(blackTint)
            } }),
        default_label: {
            fontSize: typography_scale[3],
            fontWeight: 'bold',
            letterSpacing: '0.46px',
            color: 'white'
        },
        success_container: __assign(__assign({}, inputGlobalStyles.container), { cursor: 'pointer', background: black, border: "2px solid ".concat(success), boxShadow: "0px 4px 10px 3px ".concat(successShadow), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
                background: shadeColor(success, 1.2)
            }, '&:active': {
                boxShadow: "0px 0px 7px 8px ".concat(successShadow)
            }, '&:focus': {
                boxShadow: "0px 0px 7px 8px ".concat(successShadow)
            } }),
        success_label: {
            fontSize: typography_scale[3],
            fontWeight: 'bold',
            letterSpacing: '0.46px',
            color: success
        },
        danger_container: __assign(__assign({}, inputGlobalStyles.container), { cursor: 'pointer', background: black, border: "2px solid ".concat(danger), boxShadow: "0px 4px 10px 3px ".concat(dangerShadow), transition: [['background', '300ms'], ['width', '300ms']], '&:hover': {
                background: shadeColor(danger, 1.2)
            }, '&:active': {
                boxShadow: "0px 0px 7px 8px ".concat(dangerShadow)
            }, '&:focus': {
                boxShadow: "0px 0px 7px 8px ".concat(dangerShadow)
            } }),
        danger_label: {
            fontSize: typography_scale[3],
            fontWeight: 'bold',
            letterSpacing: '0.46px',
            color: danger
        }
    }
};

export { Button, darkDefault as DarkDefaultTheme, SoraTheme };
